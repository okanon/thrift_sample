/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Calc : TBase
{
  private double _plus;
  private double _minus;
  private double _multiplies;
  private double _divides;

  public double Plus
  {
    get
    {
      return _plus;
    }
    set
    {
      __isset.plus = true;
      this._plus = value;
    }
  }

  public double Minus
  {
    get
    {
      return _minus;
    }
    set
    {
      __isset.minus = true;
      this._minus = value;
    }
  }

  public double Multiplies
  {
    get
    {
      return _multiplies;
    }
    set
    {
      __isset.multiplies = true;
      this._multiplies = value;
    }
  }

  public double Divides
  {
    get
    {
      return _divides;
    }
    set
    {
      __isset.divides = true;
      this._divides = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool plus;
    public bool minus;
    public bool multiplies;
    public bool divides;
  }

  public Calc() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              Plus = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Minus = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Multiplies = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Divides = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Calc");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.plus) {
        field.Name = "plus";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Plus);
        oprot.WriteFieldEnd();
      }
      if (__isset.minus) {
        field.Name = "minus";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Minus);
        oprot.WriteFieldEnd();
      }
      if (__isset.multiplies) {
        field.Name = "multiplies";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Multiplies);
        oprot.WriteFieldEnd();
      }
      if (__isset.divides) {
        field.Name = "divides";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Divides);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Calc(");
    bool __first = true;
    if (__isset.plus) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Plus: ");
      __sb.Append(Plus);
    }
    if (__isset.minus) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Minus: ");
      __sb.Append(Minus);
    }
    if (__isset.multiplies) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Multiplies: ");
      __sb.Append(Multiplies);
    }
    if (__isset.divides) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Divides: ");
      __sb.Append(Divides);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

