/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sample_H
#define sample_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "sample_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class sampleIf {
 public:
  virtual ~sampleIf() {}
  virtual void hello(std::string& _return, const std::string& value) = 0;
  virtual void ipaddr(std::string& _return) = 0;
  virtual int32_t random(const int32_t num) = 0;
  virtual void uuid(std::string& _return) = 0;
  virtual void calculator(Calc& _return, const double num1, const double num2) = 0;
};

class sampleIfFactory {
 public:
  typedef sampleIf Handler;

  virtual ~sampleIfFactory() {}

  virtual sampleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(sampleIf* /* handler */) = 0;
};

class sampleIfSingletonFactory : virtual public sampleIfFactory {
 public:
  sampleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<sampleIf>& iface) : iface_(iface) {}
  virtual ~sampleIfSingletonFactory() {}

  virtual sampleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(sampleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<sampleIf> iface_;
};

class sampleNull : virtual public sampleIf {
 public:
  virtual ~sampleNull() {}
  void hello(std::string& /* _return */, const std::string& /* value */) {
    return;
  }
  void ipaddr(std::string& /* _return */) {
    return;
  }
  int32_t random(const int32_t /* num */) {
    int32_t _return = 0;
    return _return;
  }
  void uuid(std::string& /* _return */) {
    return;
  }
  void calculator(Calc& /* _return */, const double /* num1 */, const double /* num2 */) {
    return;
  }
};

typedef struct _sample_hello_args__isset {
  _sample_hello_args__isset() : value(false) {}
  bool value :1;
} _sample_hello_args__isset;

class sample_hello_args {
 public:

  sample_hello_args(const sample_hello_args&);
  sample_hello_args& operator=(const sample_hello_args&);
  sample_hello_args() : value() {
  }

  virtual ~sample_hello_args() throw();
  std::string value;

  _sample_hello_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const sample_hello_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sample_hello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_hello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sample_hello_pargs {
 public:


  virtual ~sample_hello_pargs() throw();
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_hello_result__isset {
  _sample_hello_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_hello_result__isset;

class sample_hello_result {
 public:

  sample_hello_result(const sample_hello_result&);
  sample_hello_result& operator=(const sample_hello_result&);
  sample_hello_result() : success() {
  }

  virtual ~sample_hello_result() throw();
  std::string success;
  sampleException e;

  _sample_hello_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const sampleException& val);

  bool operator == (const sample_hello_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sample_hello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_hello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_hello_presult__isset {
  _sample_hello_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_hello_presult__isset;

class sample_hello_presult {
 public:


  virtual ~sample_hello_presult() throw();
  std::string* success;
  sampleException e;

  _sample_hello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sample_ipaddr_args {
 public:

  sample_ipaddr_args(const sample_ipaddr_args&);
  sample_ipaddr_args& operator=(const sample_ipaddr_args&);
  sample_ipaddr_args() {
  }

  virtual ~sample_ipaddr_args() throw();

  bool operator == (const sample_ipaddr_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sample_ipaddr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_ipaddr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sample_ipaddr_pargs {
 public:


  virtual ~sample_ipaddr_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_ipaddr_result__isset {
  _sample_ipaddr_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_ipaddr_result__isset;

class sample_ipaddr_result {
 public:

  sample_ipaddr_result(const sample_ipaddr_result&);
  sample_ipaddr_result& operator=(const sample_ipaddr_result&);
  sample_ipaddr_result() : success() {
  }

  virtual ~sample_ipaddr_result() throw();
  std::string success;
  sampleException e;

  _sample_ipaddr_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const sampleException& val);

  bool operator == (const sample_ipaddr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sample_ipaddr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_ipaddr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_ipaddr_presult__isset {
  _sample_ipaddr_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_ipaddr_presult__isset;

class sample_ipaddr_presult {
 public:


  virtual ~sample_ipaddr_presult() throw();
  std::string* success;
  sampleException e;

  _sample_ipaddr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sample_random_args__isset {
  _sample_random_args__isset() : num(false) {}
  bool num :1;
} _sample_random_args__isset;

class sample_random_args {
 public:

  sample_random_args(const sample_random_args&);
  sample_random_args& operator=(const sample_random_args&);
  sample_random_args() : num(0) {
  }

  virtual ~sample_random_args() throw();
  int32_t num;

  _sample_random_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const sample_random_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const sample_random_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_random_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sample_random_pargs {
 public:


  virtual ~sample_random_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_random_result__isset {
  _sample_random_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_random_result__isset;

class sample_random_result {
 public:

  sample_random_result(const sample_random_result&);
  sample_random_result& operator=(const sample_random_result&);
  sample_random_result() : success(0) {
  }

  virtual ~sample_random_result() throw();
  int32_t success;
  sampleException e;

  _sample_random_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const sampleException& val);

  bool operator == (const sample_random_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sample_random_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_random_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_random_presult__isset {
  _sample_random_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_random_presult__isset;

class sample_random_presult {
 public:


  virtual ~sample_random_presult() throw();
  int32_t* success;
  sampleException e;

  _sample_random_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sample_uuid_args {
 public:

  sample_uuid_args(const sample_uuid_args&);
  sample_uuid_args& operator=(const sample_uuid_args&);
  sample_uuid_args() {
  }

  virtual ~sample_uuid_args() throw();

  bool operator == (const sample_uuid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sample_uuid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_uuid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sample_uuid_pargs {
 public:


  virtual ~sample_uuid_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_uuid_result__isset {
  _sample_uuid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_uuid_result__isset;

class sample_uuid_result {
 public:

  sample_uuid_result(const sample_uuid_result&);
  sample_uuid_result& operator=(const sample_uuid_result&);
  sample_uuid_result() : success() {
  }

  virtual ~sample_uuid_result() throw();
  std::string success;
  sampleException e;

  _sample_uuid_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const sampleException& val);

  bool operator == (const sample_uuid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sample_uuid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_uuid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_uuid_presult__isset {
  _sample_uuid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_uuid_presult__isset;

class sample_uuid_presult {
 public:


  virtual ~sample_uuid_presult() throw();
  std::string* success;
  sampleException e;

  _sample_uuid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sample_calculator_args__isset {
  _sample_calculator_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _sample_calculator_args__isset;

class sample_calculator_args {
 public:

  sample_calculator_args(const sample_calculator_args&);
  sample_calculator_args& operator=(const sample_calculator_args&);
  sample_calculator_args() : num1(0), num2(0) {
  }

  virtual ~sample_calculator_args() throw();
  double num1;
  double num2;

  _sample_calculator_args__isset __isset;

  void __set_num1(const double val);

  void __set_num2(const double val);

  bool operator == (const sample_calculator_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const sample_calculator_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_calculator_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sample_calculator_pargs {
 public:


  virtual ~sample_calculator_pargs() throw();
  const double* num1;
  const double* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_calculator_result__isset {
  _sample_calculator_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_calculator_result__isset;

class sample_calculator_result {
 public:

  sample_calculator_result(const sample_calculator_result&);
  sample_calculator_result& operator=(const sample_calculator_result&);
  sample_calculator_result() {
  }

  virtual ~sample_calculator_result() throw();
  Calc success;
  sampleException e;

  _sample_calculator_result__isset __isset;

  void __set_success(const Calc& val);

  void __set_e(const sampleException& val);

  bool operator == (const sample_calculator_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sample_calculator_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sample_calculator_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sample_calculator_presult__isset {
  _sample_calculator_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sample_calculator_presult__isset;

class sample_calculator_presult {
 public:


  virtual ~sample_calculator_presult() throw();
  Calc* success;
  sampleException e;

  _sample_calculator_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class sampleClient : virtual public sampleIf {
 public:
  sampleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  sampleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello(std::string& _return, const std::string& value);
  void send_hello(const std::string& value);
  void recv_hello(std::string& _return);
  void ipaddr(std::string& _return);
  void send_ipaddr();
  void recv_ipaddr(std::string& _return);
  int32_t random(const int32_t num);
  void send_random(const int32_t num);
  int32_t recv_random();
  void uuid(std::string& _return);
  void send_uuid();
  void recv_uuid(std::string& _return);
  void calculator(Calc& _return, const double num1, const double num2);
  void send_calculator(const double num1, const double num2);
  void recv_calculator(Calc& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class sampleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<sampleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (sampleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ipaddr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_random(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uuid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calculator(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  sampleProcessor(::apache::thrift::stdcxx::shared_ptr<sampleIf> iface) :
    iface_(iface) {
    processMap_["hello"] = &sampleProcessor::process_hello;
    processMap_["ipaddr"] = &sampleProcessor::process_ipaddr;
    processMap_["random"] = &sampleProcessor::process_random;
    processMap_["uuid"] = &sampleProcessor::process_uuid;
    processMap_["calculator"] = &sampleProcessor::process_calculator;
  }

  virtual ~sampleProcessor() {}
};

class sampleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  sampleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< sampleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< sampleIfFactory > handlerFactory_;
};

class sampleMultiface : virtual public sampleIf {
 public:
  sampleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<sampleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~sampleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<sampleIf> > ifaces_;
  sampleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<sampleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void hello(std::string& _return, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello(_return, value);
    }
    ifaces_[i]->hello(_return, value);
    return;
  }

  void ipaddr(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ipaddr(_return);
    }
    ifaces_[i]->ipaddr(_return);
    return;
  }

  int32_t random(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->random(num);
    }
    return ifaces_[i]->random(num);
  }

  void uuid(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uuid(_return);
    }
    ifaces_[i]->uuid(_return);
    return;
  }

  void calculator(Calc& _return, const double num1, const double num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calculator(_return, num1, num2);
    }
    ifaces_[i]->calculator(_return, num1, num2);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class sampleConcurrentClient : virtual public sampleIf {
 public:
  sampleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  sampleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello(std::string& _return, const std::string& value);
  int32_t send_hello(const std::string& value);
  void recv_hello(std::string& _return, const int32_t seqid);
  void ipaddr(std::string& _return);
  int32_t send_ipaddr();
  void recv_ipaddr(std::string& _return, const int32_t seqid);
  int32_t random(const int32_t num);
  int32_t send_random(const int32_t num);
  int32_t recv_random(const int32_t seqid);
  void uuid(std::string& _return);
  int32_t send_uuid();
  void recv_uuid(std::string& _return, const int32_t seqid);
  void calculator(Calc& _return, const double num1, const double num2);
  int32_t send_calculator(const double num1, const double num2);
  void recv_calculator(Calc& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
