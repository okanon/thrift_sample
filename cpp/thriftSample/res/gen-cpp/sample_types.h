/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sample_TYPES_H
#define sample_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct ErrorCode {
  enum type {
    ILLEGAL_ARGUMENT = 0,
    INVALID_IPADDR = 1,
    WINSOCK_FAILED = 2,
    INVALID_NUMERIC = 3,
    GENERATOR_FALIED = 4
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

class Calc;

class sampleException;

typedef struct _Calc__isset {
  _Calc__isset() : plus(false), minus(false), multiplies(false), divides(false) {}
  bool plus :1;
  bool minus :1;
  bool multiplies :1;
  bool divides :1;
} _Calc__isset;

class Calc : public virtual ::apache::thrift::TBase {
 public:

  Calc(const Calc&);
  Calc& operator=(const Calc&);
  Calc() : plus(0), minus(0), multiplies(0), divides(0) {
  }

  virtual ~Calc() throw();
  double plus;
  double minus;
  double multiplies;
  double divides;

  _Calc__isset __isset;

  void __set_plus(const double val);

  void __set_minus(const double val);

  void __set_multiplies(const double val);

  void __set_divides(const double val);

  bool operator == (const Calc & rhs) const
  {
    if (!(plus == rhs.plus))
      return false;
    if (!(minus == rhs.minus))
      return false;
    if (!(multiplies == rhs.multiplies))
      return false;
    if (!(divides == rhs.divides))
      return false;
    return true;
  }
  bool operator != (const Calc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Calc &a, Calc &b);

std::ostream& operator<<(std::ostream& out, const Calc& obj);

typedef struct _sampleException__isset {
  _sampleException__isset() : code(false), reason(false) {}
  bool code :1;
  bool reason :1;
} _sampleException__isset;

class sampleException : public ::apache::thrift::TException {
 public:

  sampleException(const sampleException&);
  sampleException& operator=(const sampleException&);
  sampleException() : code((ErrorCode::type)0), reason() {
  }

  virtual ~sampleException() throw();
  ErrorCode::type code;
  std::string reason;

  _sampleException__isset __isset;

  void __set_code(const ErrorCode::type val);

  void __set_reason(const std::string& val);

  bool operator == (const sampleException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const sampleException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sampleException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(sampleException &a, sampleException &b);

std::ostream& operator<<(std::ostream& out, const sampleException& obj);



#endif
